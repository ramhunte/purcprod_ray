## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
# Data prep for Shoreside Purchase and production
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##

source("C:/Program Files/R/connectioninfoROracle.r")
preventingprintingtoconsole <- dbSendQuery(framdw, "alter session set current_schema=FRAM_ANALYSIS_CURRENT")

#currentyear is the final year of observations. We need this value for deflation and to limit the years of the dataset
currentyear <- 2017
##FRs are behind and in case we wanted to report in the same $ as the others are being reported
currentdefl <- 2017

##_________________________________________________##
##---------------- Libraries---------------#####
##_________________________________________________##
need<-c("daff","sqldf",'dplyr','reshape2','reldist','antitrust','bazar') #needed packages for a job
ins<-installed.packages()[,1] #find out which packages are installed
(Get<-need[which(is.na(match(need,ins)))]) # check if the needed packages are installed
if(length(Get)>0){install.packages(Get)} #install the needed packages if they are not-installed
eval(parse(text=paste("library(",need,")")))#load the needed packages
library(EDCReport)

##_________________________________________________##
##---------------- inflation adjuster ------------####
##_________________________________________________##
defl <- dbGetQuery(framdw, paste0("select year, defl", currentdefl, "/100 as defl from edc_gdp_defl")) %>% 
  dplyr::rename(SURVEY_YEAR = YEAR)

##_________________________________________________##
#---------- Useful intermediate datasets-----------####
##_________________________________________________##
# Generate grouping categories
procs1 <- dbGetQuery(framdw, paste0("select distinct ghid, survey_year, pm_cat, process_status, region, company_size
                     from EDC_FR_DESCRIPTORS 
                     where survey_year <=", currentyear, "
                     and pm_cat != 'Other'
                     and cs_participant = 'Y' ")) %>%
  #av: I added "non-processor" but i'm not sure that is necessary or not
  mutate(COMPANY_SIZE = case_when(PROCESS_STATUS == 'Non-processor' ~ 'Non-processor',
                                  T ~ COMPANY_SIZE)) %>%
  select(-PROCESS_STATUS)

procs <- procs1 %>%
  rbind(procs1 %>%
          mutate(PM_CAT = 'All'))


##_________________________________________________##
#------------------Data Pulls----------------------##
##_________________________________________________##

# Purchase####
FR_purchase <- dbGetQuery(framdw, paste0("
  select sum(weight) weight, sum(cost) cost, species_cd species, fishery_group, GHID, SURVEY_YEAR
  from EDC_FR_PURCHASE
  where survey_year <=", currentyear, "
  and type = 'Paid'
  group by survey_year, ghid, species_cd, fishery_group")) %>%
  melt(id.vars = c('GHID','SURVEY_YEAR', 'SPECIES', 'FISHERY_GROUP')) %>%
  mutate(METRIC = case_when(variable == 'WEIGHT' ~ 'Purchase weight',
                            variable == 'COST' ~ 'Purchase value'),
         VALUE = value,
         TYPE = NA,
         SPECIES = as.character(SPECIES)) %>%
  select(-variable, -value) %>%
  #av:I believe we want to filter these out
  filter(!SPECIES %in% c('Groundfish bycatch','Groundfish Bycatch', 'Nonspecies specific product', 
                         'Whiting bycatch', 'Whiting Bycatch'))

# Production####
FR_prod <- dbGetQuery(framdw, paste0("
  select sum(weight) weight, sum(value) value, species_cd species, fishery_group, GHID,SURVEY_YEAR, product type
  from EDC_FR_PRODUCTION
  where survey_year <=", currentyear, "
  group by survey_year, ghid, species_cd, fishery_group, product")) %>%
  mutate(SPECIES = as.character(SPECIES)) %>%
  #av:I believe we want to filter these out
  filter(!SPECIES %in% c('Groundfish bycatch','Groundfish Bycatch','Nonspecies specific product', 
                         'Whiting bycatch', 'Whiting Bycatch'))
# calculating producation value and lbs by species for all products
FR_allproducts <- FR_prod %>%
  group_by(GHID, SURVEY_YEAR, SPECIES, FISHERY_GROUP) %>%
  summarize(WEIGHT = sum(WEIGHT),
            VALUE = sum(VALUE)) %>%
  mutate(TYPE = 'All products') %>%
  data.frame()

# combine all the production pieces
FR_prod_all <- rbind(FR_prod, FR_allproducts) %>%
  melt(id.vars = c('GHID','SURVEY_YEAR','TYPE', 'SPECIES','FISHERY_GROUP')) %>%
  mutate(METRIC = case_when(variable == 'WEIGHT' ~ 'Production weight',
                            variable == 'VALUE' ~ 'Production value'),
         VALUE = value) %>%
  select(-variable, -value)

# Combining purchase and production###########
FR_prodpurc_all <- rbind(FR_purchase, FR_prod_all) %>%
  merge(defl) %>%
  mutate(VALUE = case_when(METRIC %in% c('Purchase value','Production value') ~ VALUE/DEFL,
                           T ~ VALUE)) %>%
  select(-DEFL)

# Creating filters#### 
#for'Production categories' and additional filters for when Region/Processor size selected
FR_prodpurc_all_prodfilters <- rbind(FR_prodpurc_all %>%
                                       mutate(SPECIES = 'All production'),
                                     FR_prodpurc_all %>%
                                       mutate(SPECIES = FISHERY_GROUP),
                                     FR_prodpurc_all %>%
                                       filter(FISHERY_GROUP != 'Other') %>%
                                       mutate(SPECIES = 'Groundfish production'),
                                     FR_prodpurc_all) %>%
  melt(id.vars = c('SURVEY_YEAR','GHID','METRIC', 'VALUE','TYPE', 'FISHERY_GROUP')) %>%
  mutate(CATEGORY = 'Fisheries',
         VARIABLE = case_when(value == 'Other' ~ 'Other species production',
                              T ~ value),
         CS = "") %>%
  select(-variable,-value, -FISHERY_GROUP)


FR_prodpurc_all_otherfilters <- rbind(FR_prodpurc_all %>%
                                        mutate(CS = 'All production'),
                                      FR_prodpurc_all %>%
                                        filter(FISHERY_GROUP != 'Other') %>%
                                        mutate(CS = 'Groundfish production'),
                                      FR_prodpurc_all %>%
                                        filter(FISHERY_GROUP == 'Other') %>%
                                        mutate(CS = 'Other species production')) %>%
  merge(procs %>%
          select(-PM_CAT) %>%
          group_by(GHID, SURVEY_YEAR, REGION, COMPANY_SIZE) %>%
          distinct(GHID)) %>%
  group_by(SURVEY_YEAR, GHID, METRIC, TYPE, REGION, COMPANY_SIZE, CS) %>%
  summarize(VALUE = sum(VALUE)) %>%
  melt(id.vars = c('SURVEY_YEAR','GHID','CS','METRIC','VALUE','TYPE')) %>%
  mutate(CATEGORY = case_when(variable == 'REGION' ~ 'Region',
                              variable == 'COMPANY_SIZE' ~ 'Processor size'),
         VARIABLE = value) %>%
  select(-variable,-value)

# One dataset for all purchase and production calculations##########
# Data handling: Remove zeros. Production value of 0 (presumably means they don't produce that product) would affect the summary statistics
# av:Data check: GHID 9767, survey year 2013, purchase cost = -15
# Condense species list
FR_prodpurc_all_filters <- rbind(FR_prodpurc_all_prodfilters,
                                 FR_prodpurc_all_otherfilters) %>%
  filter(VALUE > 0) %>%
  # apply species groupings based on analysis of revenue
  mutate(VARIABLE = case_when(VARIABLE %in% c('California halibut','Pacific halibut','Sturgeon',
                                              'Pacific herring','Squid','Echinoderms') ~ 'Other species',
                              VARIABLE %in% c('English sole','Lingcod','Rex sole','Sharks, skates and rays', 
                                              'Arrowtooth flounder','Sanddab') ~ 'Other groundfish species',
                                              T ~ VARIABLE)) %>%
  group_by(SURVEY_YEAR, GHID, METRIC, TYPE, CATEGORY, VARIABLE, CS) %>%
  summarize(VALUE = sum(VALUE)) %>%
  ungroup()

##_________________________________________________##
#-------Purchase and Production Analysis-------------#
##_________________________________________________##

##Calculating rates####
#decided to only calculate rates for the fisheries category
prodpurc_rates <- filter(FR_prodpurc_all_filters, CATEGORY == 'Fisheries') %>%
  mutate(TYPE = case_when(METRIC %in% c('Purchase value','Purchase weight') ~ 'All products',
                          T ~ TYPE)) %>%
  dcast(GHID + SURVEY_YEAR + TYPE + CATEGORY + VARIABLE + CS ~ METRIC, value.var = 'VALUE', fun.aggregate = mean) %>%
  mutate(`Purchase price (per lb)` = case_when(!is.na(`Purchase value`) & !is.na(`Purchase weight`) 
                                             & TYPE == 'All products' ~ `Purchase value`/`Purchase weight`,
                                             T ~ NA_real_),
         `Production price (per lb)` = case_when(!is.na(`Production value`) & !is.na(`Production weight`) ~ `Production value`/`Production weight`,
                                               T ~ NA_real_),
         Markup = case_when(TYPE == 'All products' & !is.na(`Purchase value`) & !is.na(`Production value`) ~ `Production value`/`Purchase value`,
                            T ~ NA_real_),
         `Recovery rate` = case_when(TYPE == 'All products' & !is.na(`Purchase weight`) & !is.na(`Production weight`) ~ `Production weight`/`Purchase weight`,
                                     T ~ NA_real_)) %>%
  melt(id.vars = c('GHID', 'SURVEY_YEAR','TYPE','CATEGORY', 'VARIABLE', 'CS')) %>%
  filter(!is.na(value) & variable %in% c('Purchase price (per lb)','Production price (per lb)','Markup', 'Recovery rate')) %>%
  mutate(METRIC = variable,
         VALUE = value) %>%
  select(-variable, -value)

# combine 'regular' metrics and rates
data_all_rates <- rbind(FR_prodpurc_all_filters, 
                        prodpurc_rates)

# confidentiality treatment
data_all_rates_treated <- PreTreat(data_all_rates, variables = c('SURVEY_YEAR','METRIC','TYPE','CS',
                                                                 'CATEGORY','VARIABLE'), valvar = 'VALUE',
                                   confunit = 'GHID', dontsum = T, drop = F, zeroNAtreatment = 'asis')
##Summarizing data#####
##Mean, median, total
data_all_smry <- data_all_rates_treated %>%
  group_by(SURVEY_YEAR, TYPE, CS, METRIC, CATEGORY, VARIABLE) %>%
  summarize(Mean = mean(VALUE, na.rm = T),
            Median = median(VALUE, na.rm = T),
            VARIANCE = sd(VALUE, na.rm = T),
            q25 = quantile(VALUE, prob=.25, type=8, na.rm = T),
            q75 = quantile(VALUE, prob=.75, type=8, na.rm = T),
            Total = sumNA(VALUE, na.rm = T),
            N = length(unique(GHID))) %>%
  data.frame() %>%
  melt(id.vars = c('SURVEY_YEAR','TYPE','CS', 'METRIC', 'CATEGORY','VARIABLE','VARIANCE','q25','q75', 'N')) %>%
  mutate(STAT = as.character(variable),
         VALUE = case_when(N < 3 ~ NA_real_,
                            T ~ value),
         rm = case_when(METRIC %in% c('Purchase price (per lb)','Production price (per lb)','Markup','Recovery rate') & STAT == 'Total' ~ 1,
                        T ~ 0),
         VARIANCE = case_when(STAT == 'Total' ~ NA_real_,
                              T ~ VARIANCE),
         q25 = case_when(STAT == 'Total' ~ NA_real_,
                         T ~ q25),
         q75 = case_when(STAT == 'Total' ~ NA_real_,
                         T ~ q75)) %>%
  filter(rm != 1) %>%
  select(-variable,-value, -rm)

##Total for rates############
## @mkcc for the rates this becomes a weighted average essentially? 
## @av yes totals for rates are weighted averages.
## @av added this chunk to calculate N in order to correctly calculate N for rates. Rates don't include a group by METRIC when summarizing
data_all_n <- data_all_rates %>%
  group_by(SURVEY_YEAR, TYPE, METRIC, CS, CATEGORY, VARIABLE) %>%
  summarize(N = length(unique(GHID))) %>%
  data.frame()

rates_tot <- filter(data_all_rates_treated, CATEGORY == 'Fisheries') %>%
  mutate(TYPE = case_when(METRIC %in% c('Purchase value','Purchase weight') ~ 'All products',
                          T ~ TYPE)) %>%
  # Need to fill in missing combinations with NA not zero
  # sumNA function excludes NA from calcs which we want.
  dcast(SURVEY_YEAR + TYPE + CS + CATEGORY + VARIABLE + GHID ~ METRIC, value.var = 'VALUE', fun.aggregate = sum, fill = NA_real_) %>%
  group_by(SURVEY_YEAR, TYPE, CS, CATEGORY, VARIABLE) %>%
  summarize(`Purchase price (per lb)` =  sumNA(`Purchase value`, na.rm = T)/sumNA(`Purchase weight`, na.rm = T),
            `Production price (per lb)` = sumNA(`Production value`, na.rm = T)/sumNA(`Production weight`, na.rm = T),
            Markup = sumNA(`Production value`, na.rm = T)/sumNA(`Purchase value`, na.rm = T),
            `Recovery rate` = sumNA(`Production weight`, na.rm = T)/sumNA(`Purchase weight`, na.rm = T)) %>%
  melt(id.vars = c('SURVEY_YEAR','TYPE','CS','CATEGORY','VARIABLE')) %>%
  mutate(rm = case_when(TYPE != 'All products' & variable %in% c('Purchase price (per lb)', 'Markup', 'Recovery rate') ~ 1,
                        T ~ 0),
         METRIC = variable,
         VALUE = value,
         STAT = 'Total',
         VARIANCE = NA_real_,
         q25 = NA_real_,
         q75 = NA_real_) %>%
  filter(rm != 1) %>%
  select(-rm, -variable, - value) %>%
  merge(data_all_n)

# Final purchase and production summarized data#################
purcprod_data_final <- rbind(data_all_smry, rates_tot) %>%
  mutate(tab = case_when(TYPE != 'All products' & !is.na(TYPE) ~ 'Product',
                         T ~ 'Summary'),
         Metric = as.character(case_when(!is.na(TYPE) & TYPE != 'All products' ~ paste0(TYPE, " (", METRIC, ")"),
                                         T ~ METRIC)),
         Variable = case_when(VARIABLE == 'CA' ~ 'California',
                              VARIABLE == 'PNW' ~ 'Washington and Oregon',
                              T ~ VARIABLE),
         Statistic = as.character(STAT)) %>%
  select(-TYPE, -METRIC, -VARIABLE, -STAT) %>%
  rename(Category = CATEGORY,
         Variance = VARIANCE,
         Value = VALUE,
         Year = SURVEY_YEAR) %>%
  group_by(Metric, Statistic) %>%
  mutate(
    unit = case_when(max(Value, na.rm = T) < 1e3 ~ '',
                     max(Value, na.rm = T) < 1e6 ~ 'thousands',
                     max(Value, na.rm = T) < 1e9 ~ 'millions',
                     max(Value, na.rm = T) < 1e12 ~ 'billions',
                     T ~ 'help'),
    ylab = case_when(Metric %in% c('Purchase value','Purchase price (per lb)','Production value',
                                   'Production price (per lb)', 'Markup') | grepl('Production value', Metric) | 
                       grepl('Production price', Metric) ~
                       paste0(Metric, ": ", Statistic, " (", unit, " ", currentdefl, " $)"),
                     Metric %in% c('Purchase weight','Production weight') | grepl('Production weight', Metric) ~
                       paste0(Metric, ": ", Statistic, " (", unit, " lbs)"),
                     Metric == 'Recovery rate' | grepl('Percent', Metric) ~ Metric,
                     T ~ paste0(Metric, " (", unit, ")"))) %>%
  as.data.frame()

##-----------------------------##
# -------Compare function-----####
##-----------------------------##
# Use this when running new data or when the code has changed to make sure errors are identified
old <- readRDS("mini_purcprod.RDS")

new <- purcprod_data_final 

head(old)
head(new)
gg <- comparefun(old, new, c('N','Value','Variance', 'q25','q75'), 'wide')
# Check missing combos
gg2 <- filter(gg, combomiss == 'Fine')

##-----------------------------##
##Remove metrics that we dont want to include#####
##-----------------------------##
purcprod_data_final <- filter(purcprod_data_final, !Metric %in% c('Recovery rate'))

##-----------------------------##
#----------Save data----------##
##---------------------------##

saveRDS(purcprod_data_final, file = "mini_purcprod.RDS")
